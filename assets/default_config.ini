# ---------- Config file for YT Spammer Purge program ----------
# INSTRUCTIONS:
# â€¢ Lines with a hashtag are just comments / instructions
# â€¢ If you set a setting in here, the program will not Ask you to enter/confirm when your run it
# â€¢ If you leave the value as 'Ask', the program will Ask you for it as usual
# â€¢ Some settings might not be necessary depending on which modes you select
#
# â€¢ For 100% automatic usage of program, enter all values (or at least all for your scanning/filtering modes)
# â€¢ NOTE: Human confirmation is required for most settings to actually remove comments
#	- If comment removal is automated, comments are marked as "held for review" and hidden
#
# MORE NOTES:
# â€¢ Current filter modes that support automated comment removal:
#		- Scanning for exact channel ID(s)
#		- Auto Smart-Mode
# â€¢ If scanning someone elses channel, you can report spammers, but while in Auto-Smart Mode only


[general]
#---------------------------------------------------------------
	# If 'True', program starts with all config settings immediately.  If 'Ask', program Asks to use config settings at start. If 'False', program will ignore this config file.
	# Default = Ask  --  Possible Values: True | False | Ask
use_this_config = Ask

	# Enter your channel ID, to bypass initial user confirmation - Example: 'UCK8sQmJBp8GCxrOtXWBpyEA'
	# Default = Ask  --  Possible Values: Ask | UCx123-BlahBlahExampleID
your_channel_id = Ask

	# Enables or disables silent checking of newer version when program runs. Only displays message if update is available.
	# This will not display errors if it cannot get version. To see any issues, use program's manual update check
	# Default = True -- Possible Values: True | False
auto_check_update = True

	# Choose whether to be notified only of stable releases, or all new releases (including pre-release / beta versions)
	# Only matters when auto_check_update is enabled
	# Default = All  --  Possible Values: All | Stable
release_channel = All

	# Skips asking for user confirmation yes/no that the entered video link/ID is correct
	# Setting is ignored if video_to_scan is set, which will make it skip anyway
	# Default = False -- Possible Values: True | False
skip_confirm_video = False

	# Overrides 'Not Your Channel' mode to allow holding comments for review in both Smart filter modes, even if you are not the video uploader
	# Only set to True if you have moderator permissions on the channel you're scanning, or you'll just get errors
	# Default = False -- Possible Values: True | False
moderator_mode = False


[scanning]
#--------------------------------------------------------------------------------
	# Scan Mode: Scan either a single video or your whole channel
	# Default = Ask  --  Possible Values: Ask | ChosenVideos | RecentVideos | EntireChannel | CommunityPost
scan_mode = Ask

	# Only necessary if scanning entire channel or a community post. Must be either 'Ask' or a number.
	# Default = Ask  --  Possible Values: Ask | [number]
max_comments = Ask

	# Video link(s) or video ID(s) to scan, in the specific videos scanning mode
	# If scanning multiple videos, they must be comma separated
	# Default = Ask  --  Possible Values: Ask | xyzVidIDExample
videos_to_scan = Ask

	# The channel ID or channel link to scan in 'Recent Videos' mode. For your own channel, enter 'Mine'
	# Default = Ask -- Posible Values: Ask | Mine | UCx123-BlahBlahExampleID
channel_to_scan = Ask

	# For Recent Video scanning mode, how many recent videos to scan. Up to 500 (the YouTube API Limit)
	# Default = Ask -- Possible Values: Ask | 1 - 500
recent_videos_amount = Ask

[filtering]
#--------------------------------------------------------------------------------
	# Mode that determines what to scan
	# Default = Ask  --  Possible Values: Ask | ID | Username | Text | NameAndText | AutoASCII | AutoSmart | SensitiveSmart
filter_mode = Ask

	# Used for modes 'Username', 'Text' or 'NameAndText' - Determines what criteria to actually scan for
	# Default = Ask  --  Possible Values: Ask | characters | strings | regex
filter_subMode = Ask


#---- Filter Mode Specific Settings ----

	# For Filter Mode 'ID' -  Enter comma separated list of IDs or channel links
	# Default = Ask  --  Possible Values: Ask | UCx123-BlahBlahExampleID
channel_ids_to_filter = Ask

	# For Filter Mode 'AutoASCII' - Choose sensitivity
	# 1 = Allow Standard + Extended ASCII,  2 = Standard ASCII Only,  3 = NUKE Mode (only letters/numbers/spaces)
	# Default = Ask  --  Possible Values: Ask | 1 | 2 | 3
autoASCII_sensitivity = Ask


#---- Filter Sub-Mode Specific Settings ----

	# Put individual characters to scan for, with no spaces or commas or anything - Example: ðŸ‘†â˜‘âž¡
	# Default = Ask  --  Possible Values: Ask | [characters]
characters_to_filter = Ask

	# Comma separated list of strings - Example:  whatsapp, something else, investment
	# Default = Ask  --  Possible Values: Ask | [strings]
strings_to_filter = Ask

	# A regex expression to filter - Example: [^\x00-\xFF]
	# Default = Ask  --  Possible Values: Ask | [regex]
regex_to_filter = Ask


[removal]
#--------------------------------------------------------------------------------
	# If 'False', behaves as normal. If 'True', simply skips deletion altogether and exits program, Good if you just want to collect logs.
	# See 'delete_without_reviewing' option for actual deletion behavior
	# Default = False  --  Possible Values: True | False
skip_deletion = False

	# If True, program will NOT require approval before deleting comments, and will just do so immediately (effective only for certain settings, see instructions at top)
	# If 'skip_deletion' setting is 'True', this setting makes no difference and no comments will be deleted
	# Default = False  --  Possible Values: True | False
delete_without_reviewing = False

	# NOTE: Only other possible option is 'False' - Only change this if going fully automated, or you never want to ban users
	# 	> The YouTube API doesn't allow banning when using "held for review" option, which currently is the only automated deletion option for this program
	# Leaving as 'Ask' asks to ban like normal. Setting it to 'True' will make NO DIFFERENCE and may only produce errors
	# Default = Ask  --  Possible Values: Ask | False
enable_ban = Ask

	# Choose the default method of comment removal the program will use. 'rejected' means normal removal/deletion. 'heldForReview' moves comment to Held For Review section. 'reportSpam' means just report for spam.
	# Note 1: If delete_without_renewing is true, this removal_type must be either reportSpam or heldForReview
	# Note 2: You can only ban users while removing their comment using 'rejected'
	# Note 3: If in 'Not Your Channel' mode, this setting has no effect, and you will always only report spam
	# Default = rejected -- Possible Values: rejected | heldForReview | reportSpam
removal_type = rejected

	# Allows you to skip the process of checking that each comment is deleted. Good to reduce API quota usage, and time spent using the app.
	# Because checking each comment individually costs 1 API unit, and there is a daily API quota of 10,000, if you're deleting thousands of comments, checking for success can quickly eat up your entire quota
	# Default = True  --  Possible Values: True | False
check_deletion_success = True

[logging]
#--------------------------------------------------------------------------------
	# Enable log file generation: 'True' or 'False'
	# Default = Ask  --  Possible Values: Ask | True | False
enable_logging = Ask

	# Set the full OR relative folder path where log files will go (not including file name itself). Ensure write permissions to path.
	# Note for windows users: Do NOT begin the path with a slash, or the location will be relative to the root of the disk!
	# Default = logs  --  Example Values:  any/relative/path/  |  C:\Users\wherever\  |  /home/user/logfiles
log_path = logs

	# Set whether to create log files as plain text, or Rich Text Format with colors
	# Default = rtf  |  Possible Values: rtf | plaintext
log_mode = rtf

	# Allows you to ALSO create a json version of the logged match data (in addition to normal log file)
	# Note: If enable_logging is False, that also disables json logging regardless of this setting
	# Default = False  --  Possible Values: True | False
json_log = False

	# Sets the encoding method to be used in the json file, if you want to change it for some reason
	# Just be sure to pick one that supports all unicode characters
	# Default = utf-8  --  Possible Values: Theoretically any python supported encoding found here: https://docs.python.org/3/library/codecs.html#standard-encodings
json_encoding = utf-8

	# Whether to add extra information about each comment to the json log file. Currently: Video Uploader's Name, Video Title
	# Default = True  --  Possible Values: True | False
json_extra_data = True

	# Whether to also fetch profile pictures for matched commeters when in json logging mode, and the video uploader's too
	# Images will be stored in the log_path, then in a folder with the same naming scheme (date/time) as the log accompanying log file
	# Each profile picture file will be named as the channel ID of the respective user + .jpg
	# To enable, set the resolution of the image ('default' = 88x88, 'medium' = 240x240, 'high' = 800x800)
	# Default = False  --  Possible Values: False | default | medium | high
json_profile_picture = False

# Don't change anything below here!
[info]
config_version = 17
